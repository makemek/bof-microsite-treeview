{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onExpand","args","console","log","onSelect","selectedKeys","info","selKey","node","eventKey","tree","map","key","ReactDOM","findDOMNode","domTreeNodes","setTreeRef","onDoubleClick","event","onNodeExpand","onAdd","selectedKey","state","root","first","model","name","uniqueId","addChild","TreeModel","parse","title","children","setState","treeData","onRemove","drop","onDrop","dragNodesKeys","dropToGap","dropPosition","sourceKey","last","destinationKey","sourceNode","destinationNode","sourceNodeClone","dropPositionNormalized","defaultTo","parent","addChildAtIndex","onGoUp","newIndex","getIndex","setIndex","onGoDown","length","keys","childrenPropertyName","out","walk","en","label","childs","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","style","margin","TreeStyled","showLine","selectable","draggable","this","ref","onClick","React","Component","styled","Tree","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ipBAYMA,E,YAIJ,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KAyBRC,SAAW,WAAa,IAAC,IAAD,qBAATC,EAAS,yBAATA,EAAS,iBACtB,EAAAC,SAAQC,IAAR,SAAY,YAAZ,OAA2BF,KA3BV,EA6BnBG,SAAW,SAACC,EAAcC,GACxBJ,QAAQC,IAAI,WAAYE,EAAcC,GACtC,EAAKC,OAASD,EAAKE,KAAKT,MAAMU,SAE1B,EAAKC,MACPR,QAAQC,IACN,qBACAE,EAAaM,KAAI,SAAAC,GAAG,OAAIC,IAASC,YAAY,EAAKJ,KAAKK,aAAaH,SApCvD,EAwCnBI,WAAa,SAACN,GACZ,EAAKA,KAAOA,GAzCK,EA2CnBO,cAAgB,SAACC,EAAOV,GACtBN,QAAQC,IAAI,gBACS,EAAKO,KACbS,aAAaD,EAAOV,IA9ChB,EAgDnBY,MAAQ,WAAO,IACNC,EADK,YACU,EAAKX,KAAKY,MAAMjB,aAD1B,MAEZ,GAAIgB,EAAJ,CAGA,IAAMb,EAAO,EAAKe,KAAKC,OAAM,qBAAGC,MAAkBb,MAAQS,KACpDK,EAAI,aAASC,sBACnBnB,EAAKoB,UAAS,IAAIC,KAAYC,MAAM,CAAClB,IAAKc,EAAMK,MAAOL,EAAMM,SAAU,MACvE,EAAKC,SAAS,CAAEC,SAAU,EAAKX,KAAKE,UAxDnB,EA0DnBU,SAAW,WAAO,IACTd,EADQ,YACO,EAAKX,KAAKY,MAAMjB,aADvB,MAEf,GAAIgB,EAAJ,CAGA,IAAMb,EAAO,EAAKe,KAAKC,OAAM,qBAAGC,MAAkBb,MAAQS,KAC1D,EAAKX,KAAKuB,SAAS,CAAE5B,aAAc,KACnCG,EAAK4B,OACL,EAAKH,SAAS,CAAEC,SAAU,EAAKX,KAAKE,UAlEnB,EAoEnBY,OAAS,YAAgE,IAA7D7B,EAA4D,EAA5DA,KAAM8B,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,aACpCC,GADgE,mEACpDC,eAAKJ,IACTK,EAAmBnC,EAAKT,MAA9B2B,KACFkB,EAAa,EAAKrB,KAAKC,OAAM,qBAAGC,MAAkBb,MAAQ6B,KAC1DI,EAAkB,EAAKtB,KAAKC,OAAM,qBAAGC,MAAkBb,MAAQ+B,KAC/DG,GAAkB,IAAIjB,KAAYC,MAAMc,EAAWnB,OACnDsB,EAAyBP,EAAe,EAAI,EAAGA,EAClDD,EACcS,oBAAUH,EAAgBI,OAAQ,EAAK1B,MAC/C2B,gBAAgBJ,EAAiBC,GAGxCF,EAAgBjB,SAASkB,GAE3BF,EAAWR,OACX,EAAKH,SAAS,CAAEC,SAAU,EAAKX,KAAKE,SAnFnB,EAqFnB0B,OAAS,WAAO,IACP9B,EADM,YACS,EAAKX,KAAKY,MAAMjB,aADzB,MAEb,GAAIgB,EAAJ,CAGA,IAAMb,EAAO,EAAKe,KAAKC,OAAM,qBAAGC,MAAkBb,MAAQS,KACpD+B,EAAW5C,EAAK6C,WAAa,EAChCD,EAAW,IAGd5C,EAAK8C,SAASF,GACd,EAAKnB,SAAS,CAAEC,SAAU,EAAKX,KAAKE,WAhGnB,EAkGnB8B,SAAW,WAAO,IACTlC,EADQ,YACO,EAAKX,KAAKY,MAAMjB,aADvB,MAEf,GAAIgB,EAAJ,CAGA,IAAMb,EAAO,EAAKe,KAAKC,OAAM,qBAAGC,MAAkBb,MAAQS,KACpD+B,EAAW5C,EAAK6C,WAAa,EAChCD,GAAY5C,EAAKyC,OAAOxB,MAAMO,SAASwB,SAG1ChD,EAAK8C,SAASF,GACd,EAAKnB,SAAS,CAAEC,SAAU,EAAKX,KAAKE,WA3GpC,IAAMgC,EAAO1D,EAAM0D,KAEblC,EADO,IAAIM,IAAU,CAAE6B,qBAAsB,WACjC5B,MAAM6B,GAJP,OAKjBpC,EAAKqC,MAAK,SAA+BpD,GAAO,IAAD,EAKzCA,EAAKiB,MAHPC,EAF2C,EAE3CA,KACSmC,EAHkC,EAG3CC,MAASD,GACTE,EAJ2C,EAI3CA,OAGFvD,EAAKiB,MAAMb,IAAMc,EACjBlB,EAAKiB,MAAMM,MAAQ8B,EACnBrD,EAAKiB,MAAMO,SAAW+B,EACtBvD,EAAKiB,MAAMsC,OAAS,QAEtB,EAAKxC,MAAO,IAAIM,KAAYC,MAAMP,EAAKE,OAEvC,EAAKH,MAAQ,CACX0C,oBAAqBP,EACrBQ,oBAAqBR,EACrBS,mBAAoBT,EACpBvB,SAAUX,EAAKE,OAvBA,E,sEAgHjB,OACE,yBAAK0C,MAAO,CAAEC,OAAQ,WACpB,wCACA,kBAACC,EAAD,CACEC,UAAQ,EAERC,YAAa,EACbC,WAAS,EAETR,oBAAqB,CAACL,EAAIjC,MAC1B1B,SAAUyE,KAAKzE,SACfqC,OAAQoC,KAAKpC,OACb4B,oBAAqBQ,KAAKnD,MAAM2C,oBAChCC,mBAAoBO,KAAKnD,MAAM4C,mBAC/B9D,SAAUqE,KAAKrE,SAEf8B,SAAU,CAACuC,KAAKnD,MAAMY,UACtBjB,cAAewD,KAAKxD,cACpByD,IAAKD,KAAKzD,aAEZ,4BAAQ2D,QAASF,KAAKrD,OAAtB,OACA,4BAAQuD,QAASF,KAAKtC,UAAtB,UACA,4BAAQwC,QAASF,KAAKtB,QAAtB,MACA,4BAAQwB,QAASF,KAAKlB,UAAtB,a,GA3IUqB,IAAMC,WAiJlBR,EAAaS,YAAOC,IAAPD,CAAH,KAcDhF,IC/JKkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNvE,IAASwE,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7F,QAAQ6F,MAAMA,EAAMC,a","file":"static/js/main.a2bc1076.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport out from './out.json'\nimport Tree from 'rc-tree';\nimport styled from 'styled-components'\nimport 'rc-tree/assets/index.css';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport TreeModel from 'tree-model'\nimport { uniqueId, last, defaultTo } from 'lodash'\n\nclass App extends React.Component {\n  static propTypes = {\n    keys: PropTypes.array,\n  };\n  constructor(props) {\n    super(props);\n    const keys = props.keys;\n    const tree = new TreeModel({ childrenPropertyName: 'childs'})\n    const root = tree.parse(out)\n    root.walk(function rcTreeModelCompatible(node) {\n      const {\n        name,\n        label: { en },\n        childs,\n      } = node.model\n\n      node.model.key = name\n      node.model.title = en\n      node.model.children = childs\n      node.model.childs = null\n    })\n    this.root = new TreeModel().parse(root.model)\n\n    this.state = {\n      defaultExpandedKeys: keys,\n      defaultSelectedKeys: keys,\n      defaultCheckedKeys: keys,\n      treeData: root.model,\n    };\n  }\n  onExpand = (...args) => {\n    console.log('onExpand', ...args);\n  };\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n    this.selKey = info.node.props.eventKey;\n\n    if (this.tree) {\n      console.log(\n        'Selected DOM node:',\n        selectedKeys.map(key => ReactDOM.findDOMNode(this.tree.domTreeNodes[key])),\n      );\n    }\n  };\n  setTreeRef = (tree) => {\n    this.tree = tree;\n  };\n  onDoubleClick = (event, node) => {\n    console.log('double click')\n    const internalTree = this.tree\n    internalTree.onNodeExpand(event, node)\n  }\n  onAdd = () => {\n    const [selectedKey] = this.tree.state.selectedKeys\n    if(!selectedKey) {\n      return\n    }\n    const node = this.root.first(({ model }) => model.key === selectedKey)\n    const name = `foo${uniqueId()}`\n    node.addChild(new TreeModel().parse({key: name, title: name, children: []}))\n    this.setState({ treeData: this.root.model })\n  }\n  onRemove = () => {\n    const [selectedKey] = this.tree.state.selectedKeys\n    if(!selectedKey) {\n      return\n    }\n    const node = this.root.first(({ model }) => model.key === selectedKey)\n    this.tree.setState({ selectedKeys: [] })\n    node.drop()\n    this.setState({ treeData: this.root.model })\n  }\n  onDrop = ({ node, dragNodesKeys, dropToGap, dropPosition, ...rest }) => {\n    const sourceKey = last(dragNodesKeys)\n    const { name: destinationKey } = node.props\n    const sourceNode = this.root.first(({ model }) => model.key === sourceKey)\n    const destinationNode = this.root.first(({ model }) => model.key === destinationKey)\n    const sourceNodeClone = new TreeModel().parse(sourceNode.model)\n    const dropPositionNormalized = dropPosition < 0 ? 0: dropPosition\n    if(dropToGap) {\n      const parent = defaultTo(destinationNode.parent, this.root)\n      parent.addChildAtIndex(sourceNodeClone, dropPositionNormalized)\n    }\n    else {\n      destinationNode.addChild(sourceNodeClone)\n    }\n    sourceNode.drop()\n    this.setState({ treeData: this.root.model })\n  }\n  onGoUp = () => {\n    const [selectedKey] = this.tree.state.selectedKeys\n    if(!selectedKey) {\n      return\n    }\n    const node = this.root.first(({ model }) => model.key === selectedKey)\n    const newIndex = node.getIndex() - 1\n    if(newIndex < 0) {\n      return\n    }\n    node.setIndex(newIndex)\n    this.setState({ treeData: this.root.model })\n  }\n  onGoDown = () => {\n    const [selectedKey] = this.tree.state.selectedKeys\n    if(!selectedKey) {\n      return\n    }\n    const node = this.root.first(({ model }) => model.key === selectedKey)\n    const newIndex = node.getIndex() + 1\n    if(newIndex >= node.parent.model.children.length) {\n      return\n    }\n    node.setIndex(newIndex)\n    this.setState({ treeData: this.root.model })\n  }\n  render() {\n    return (\n      <div style={{ margin: '0 20px' }}>\n        <h2>TreeNode</h2>\n        <TreeStyled\n          showLine\n          // checkable\n          selectable={ true }\n          draggable\n          // defaultExpandAll\n          defaultExpandedKeys={[out.name]}\n          onExpand={this.onExpand}\n          onDrop={this.onDrop}\n          defaultSelectedKeys={this.state.defaultSelectedKeys}\n          defaultCheckedKeys={this.state.defaultCheckedKeys}\n          onSelect={this.onSelect}\n          // onCheck={this.onCheck}\n          treeData={[this.state.treeData]}\n          onDoubleClick={this.onDoubleClick}\n          ref={this.setTreeRef}\n        />\n        <button onClick={this.onAdd}>Add</button>\n        <button onClick={this.onRemove}>Remove</button>\n        <button onClick={this.onGoUp}>Up</button>\n        <button onClick={this.onGoDown}>Down</button>\n      </div>\n    );\n  }\n}\n\nconst TreeStyled = styled(Tree)`\n  /* button size */\n  li[role=\"treeitem\"], .rc-tree-title {\n    padding: 5px 0;\n  }\n  .rc-tree-node-selected, .rc-tree-node-content-wrapper:hover {\n    background-color: lightblue;\n    border: none;\n  }\n  .rc-tree-node-selected {\n    font-weight: bolder;\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}